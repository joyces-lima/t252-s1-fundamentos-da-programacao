// Estrutura do ex
// Crie uma interface Notificacao com as propriedades:

// id: n√∫mero identificador da notifica√ß√£o;
// titulo: string com o texto da notifica√ß√£o;
// tipo: pode ser apenas "alerta" | "aviso" | "informacao";
// lida: boolean que indica se a notifica√ß√£o j√° foi lida.

interface Notificacao{
    id: number;
    titulo:string;
    tipo: "alerta" | "aviso" | "informacao";
    lida: boolean
}

// Crie um array chamado inbox com pelo menos 3 notifica√ß√µes diferentes seguindo a interface.

const inbox: Notificacao[] = [
    {
        id: 1,
        titulo: "Seu boleto vence hoje",
        tipo: "alerta",
        lida: false
    },

    {
        id: 2,
        titulo: "Novo comentario na sua publica√ß√£o",
        tipo: "informacao",
        lida: true
    },

    {
        id: 3,
        titulo: "Nova atualiza√ß√£o do sistema",
        tipo: "aviso",
        lida: false
    }
]

// Fun√ß√µes declaradas
// Crie uma fun√ß√£o declarada chamada statusLeitura que receba uma notifica√ß√£o e retorne:
// "‚úÖ lida" se lida = true;
// "üì® n√£o lida" se lida = false.

function statusLeitura(notificacao: Notificacao): string {
    if (notificacao.lida === true) {
        return "‚úÖ lida"
    }
    else {
        return "üì® n√£o lida"
    }
}

// Fun√ß√µes an√¥nimas
// Crie uma fun√ß√£o an√¥nima atribu√≠da a uma constante chamada marcarComoLida que receba o array de notifica√ß√µes e um id:
// Se encontrar uma notifica√ß√£o com aquele id, altere lida para true e retorne uma mensagem de confirma√ß√£o.
// Se n√£o encontrar, retorne "ID n√£o encontrado".
// Restri√ß√£o: fa√ßa a compara√ß√£o apenas com inbox[0], inbox[1] e inbox[2] (sem usar loops ainda).